//Code For The Object Manipulation by StanLeeBOY
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BasePlayerObjectManipulation : MonoBehaviour
{
    public Transform cameraReference; // Public reference to the camera's transform
    [SerializeField] private float raycastDistance = 10f;
    [SerializeField] private float maxHoldDistance = 5f;
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float rotateSpeed = 5f;

    private Rigidbody heldRigidbody;
    private Vector3 holdPosition;
    private bool isHolding = false;

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.E))
        {
            if (!isHolding)
            {
                RaycastHit hit;
                if (Physics.Raycast(cameraReference.position, cameraReference.forward, out hit, raycastDistance))
                {
                    if (hit.rigidbody && hit.collider.tag != "Player")
                    {
                        heldRigidbody = hit.rigidbody;
                        heldRigidbody.useGravity = false;
                        holdPosition = hit.point - heldRigidbody.transform.position;
                        isHolding = true;
                    }
                }
            }
            else
            {
                isHolding = false;
                if (heldRigidbody)
                {
                    heldRigidbody.useGravity = true;
                    heldRigidbody = null;
                }
            }
        }

        if (isHolding && heldRigidbody)
        {
            Vector3 targetPosition = cameraReference.position + cameraReference.forward * maxHoldDistance;
            heldRigidbody.velocity = (targetPosition - heldRigidbody.position) * moveSpeed;
            Quaternion targetRotation = Quaternion.LookRotation(cameraReference.forward, cameraReference.up);
            heldRigidbody.rotation = Quaternion.Slerp(heldRigidbody.rotation, targetRotation, rotateSpeed * Time.deltaTime);
        }
    }
}
